/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package online_auction;
import java.util.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JTextField;
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.temporal.Temporal;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
//import javax.swing.Timer;
import java.util.Date;      
import java.util.TimerTask;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import static sun.net.www.protocol.http.AuthCacheValue.Type.Server;

/**
 *
 * @author Nadim
 */
public class serverGUI extends javax.swing.JFrame {
    
    //----------------------------------------------------------------------------------------------------------
  LocalTime startTime;
  //setting up a  boolean to disconnect the server
  Boolean isConnected=true;
  //initialising the username and address
  String username, address = "localhost";
  //initialising up the port number
  int port = 2222;  
  Socket sock;
  //initialising the reader and writer
  BufferedReader reader;
  PrintWriter writer;
  //declareing a array list to make a list of the sockets
  ArrayList<Socket> socketList = new ArrayList();
  //getting the highest bid value
  int highest_bid_update;
  //setting up a string to announce the winner
  String winner;
  //getting current time and date
  Calendar CurrentTime = Calendar.getInstance();
  
  
  
  
    public serverGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Start_server = new javax.swing.JButton();
        Stop_server = new javax.swing.JButton();
        Send_item_details = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        History_display = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        Max_time_allowed = new javax.swing.JTextField();
        Current_time = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Time_remaining = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Item_description = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        Current_Highest_bid = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Stop_current_bid = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Start_server.setText("Start Server");
        Start_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Start_serverActionPerformed(evt);
            }
        });

        Stop_server.setText("Stop Server");
        Stop_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Stop_serverActionPerformed(evt);
            }
        });

        Send_item_details.setText("Send Item Details ");
        Send_item_details.setAutoscrolls(true);
        Send_item_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Send_item_detailsActionPerformed(evt);
            }
        });

        History_display.setColumns(20);
        History_display.setRows(5);
        jScrollPane2.setViewportView(History_display);

        Max_time_allowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Max_time_allowedActionPerformed(evt);
            }
        });

        Current_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Current_timeActionPerformed(evt);
            }
        });

        jLabel4.setText("                  Item Description");

        jLabel5.setText("Enter Maximum time Allowed(Minutes)");

        Time_remaining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Time_remainingActionPerformed(evt);
            }
        });

        jLabel6.setText("Current time");

        jLabel7.setText("  Time Remaining");

        Item_description.setColumns(20);
        Item_description.setRows(5);
        jScrollPane1.setViewportView(Item_description);

        Current_Highest_bid.setColumns(20);
        Current_Highest_bid.setRows(5);
        jScrollPane3.setViewportView(Current_Highest_bid);

        jLabel2.setText("                 Highest Bid");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addComponent(Max_time_allowed, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Current_time, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Time_remaining)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Max_time_allowed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Current_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Time_remaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        jLabel1.setText("                    History");

        Stop_current_bid.setText("Stop current Bidding");
        Stop_current_bid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Stop_current_bidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Start_server)
                        .addGap(31, 31, 31)
                        .addComponent(Stop_server)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Stop_current_bid)
                        .addGap(34, 34, 34)
                        .addComponent(Send_item_details))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Start_server, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Stop_server)
                        .addComponent(Send_item_details)
                        .addComponent(Stop_current_bid)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Current_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Current_timeActionPerformed
    
// TODO add your handling code here:
    }//GEN-LAST:event_Current_timeActionPerformed
 
    private void Time_remainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Time_remainingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Time_remainingActionPerformed
 
    private void Stop_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_serverActionPerformed
     
          // TODO add your handling code here:
   //---------------------------------------------------------------------------------------------------------------------------------       
           //telling all the connected user that the server is disconnected now
          for(Socket c : socketList){
              try {
                  c.getPort();
                  writer = new PrintWriter(c.getOutputStream());
                  writer.println("Server shutdown");
                  writer.flush();
              } catch (IOException ex) {
                  Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
              } 
          }
          //to see the list of the connected clients
          // System.out.println(socketList.toString());
          String servershutTime_string = new SimpleDateFormat("HH:mm:ss").format(new Date());
          History_display.append("Server shutting down at "+":  " + CurrentTime.getTime()+ "\n"); 
          this.isConnected=false;
   //---------------------------------------------------------------------------------------------------------------------------------   

    }//GEN-LAST:event_Stop_serverActionPerformed
    //Showing time
  
    
    private void Start_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Start_serverActionPerformed
        // TODO add your handling code here:
       //------------------------------------------------------------------------------------------------------------------------------
       //starting the server thread
       Thread starter = new Thread(new Server_thread());
       starter.start();
       //------------------------------------------------------------------------------------------------------------------------------
       //displaying server start time
        String serverStartTime_string = new SimpleDateFormat("HH:mm:ss").format(new Date());
        History_display.append("Server starting at"+ ":  " + CurrentTime.getTime()+ "\n");     
      //--------------------------------------------------------
      //setting current time with automatic update
        Timer CurrentTime = new Timer();
        CurrentTime.scheduleAtFixedRate(new TimerTask(){
            @Override
            public void run() {
               String string = new SimpleDateFormat("HH:mm:ss").format(new Date());
               Current_time.setText(string);
            }
        }, 0, 1000);
        //-----------------------------------------------------------------------------------------------------------------------------
     
    }//GEN-LAST:event_Start_serverActionPerformed

    private void Max_time_allowedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Max_time_allowedActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Max_time_allowedActionPerformed

    private void Send_item_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Send_item_detailsActionPerformed
         
        //------------------------------------------------------------------------------------------------------------------------------
        //strings for send over the informationms to the client
        String item_details="item description:"+ Item_description.getText();
        String timeRemaining="Time Remainging:"+ Max_time_allowed.getText();
        //sending to all the connected client
         for(Socket c : socketList){
              try {
                  c.getPort();
                  writer = new PrintWriter(c.getOutputStream());
                  writer.println(item_details);
                  writer.println(timeRemaining);
                  writer.flush();
              } catch (IOException ex) {
                  Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
              } 
             Send_item_details.setEnabled(false);
          }
        //------------------------------------------------------------------------------------------------------------------------------
        //setting the remainging time  from 
        Timer CurrentTime = new Timer();
        int minutes =Integer.parseInt(Max_time_allowed.getText());
        long startTime = System.currentTimeMillis();
        long endTime = startTime + (minutes * 60 * 1000);
        CurrentTime.scheduleAtFixedRate(new TimerTask(){
            @Override
            public void run() {
               while (System.currentTimeMillis() < endTime){
               String s =formatSeconds(endTime - System.currentTimeMillis());
               Time_remaining.setText(s);
               
            }
        }}, 0, 1000);  
     Item_description.setEditable(false);
    }
    //--------------------------------------------------------------------------------------------------------------------------------
        
    
 //----------------------------------------------------------------------------------------------------------------------------------
 //formatting the time
  private static String formatSeconds(long seconds) {
  return (seconds != 1) ? String.format(
      "%d ",seconds) : "1";
}
  //---------------------------------------------------------------------------------------------------------------------------------
//formatting the time in minutes  
static String formatTime(long millis) {
  long seconds = millis / 1000;
  if (seconds > 60) {
    long minutes = seconds / 60;
    seconds -= (minutes * 60);
    if (minutes > 1) {
      return String.format("%d minutes, %s",
          minutes, formatSeconds(seconds));
    } else {
      return String.format("1 minute, %s",
          formatSeconds(seconds));
    }
  }
  return formatSeconds(seconds);
}      
//-----------------------------------------------------------------------------------------------------------------------------------                    
 //update client in every second
//didnt need to use this method
   public void bidUpdate() {
       String s= "current highest bid"+highest_bid_update;
     
         //long mainTime = System.currentTimeMillis()/1000;
         
          while(true)//
          
          for(Socket c : socketList){
          long millis = System.currentTimeMillis();
              try {
                  c.getPort();
                  writer = new PrintWriter(c.getOutputStream());
                  writer.println(s);
                  writer.flush();
                  try {
                      Thread.sleep(1000 - millis % 1000);
                  } catch (InterruptedException ex) {
                      Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
                  }
              } catch (IOException ex) {
                  Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
              }
      
    }

   }
  //----------------------------------------------------------------------------------------------------------------------------------
  //Creating the server thread
public class Server_thread implements Runnable  {
//string to send details to the new client
String newclient=Item_description.getText();
    @Override
    public void run() {
            try 
            {   
                ServerSocket serverSock = new ServerSocket(2222);
                
                
                while (isConnected==true) 
                {
                  Socket clientSock = serverSock.accept();
                  writer = new PrintWriter(clientSock.getOutputStream());
                  //sending new client the description of current item
                  String newclient="Welcome :"+Item_description.getText();
                  writer.println(newclient);
                  writer.flush();
                  //Adding the socket number in the socket list
                  socketList.add(clientSock);
                  //creating a new client handler thread
                  ClientHandler s= new ClientHandler(clientSock);
		  new Thread(s).start(); 
                }
            }
            catch (IOException ex)
            {
            History_display.append("Error making a connection. \n");
            }
    }
     //-------------------------------------------------------------------------------------------------------------------------------
    //Clienthandler Thread to deal with various requests from the Clients
    public class ClientHandler implements Runnable	
   {
       BufferedReader reader;
       PrintWriter writer;
    public ClientHandler(Socket clientSocket) 
       { 
            try 
            {
                sock = clientSocket;
                writer =new PrintWriter(sock.getOutputStream(), true); 
                InputStreamReader isReader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(isReader);
            }
            catch (Exception ex) 
            {
                History_display.append("Unexpected error... \n");
            }

       }
    
       @Override
       public void run() 
       {
           while (true)  
           {
               //getting current time
           Calendar CurrentTime = Calendar.getInstance();
           //setting Strings to identify various clients communication
           String message, connect = "New Connection", disconnect = "Client Disconnected", bid= "New Bid of" ;
           String[] data;
           try
           {
               while ((message = reader.readLine()) != null)
               {
                   data = message.split(":");
                   for (String token:data)
                   {
                       //we can use it to display the whole data
                      // History_display.append(token + "\n");
                   }
                    //creating a for loop to give right size to the array
                   for (int i = 0; i < data.length; i++) {
                       
                   if (data[i].contains(connect))
                   {
                       History_display.append(message + "\n"+ CurrentTime.getTime()+"\n"+"\n");
                       
                       
                   }
                   else if (data[i].contains(disconnect))
                   {
                       History_display.append(message + "\n"+CurrentTime.getTime()+"\n"+"\n");
                       
                   }
                   
                   else if (data[i].contains(bid))
                   {
                    History_display.append(message + "\n"+CurrentTime.getTime()+"\n"+"\n");
                    String[] parts = message.split(":");
                    String part1 = parts[0];
                    String part2 = parts[1];
                    String part3 = parts[2];
                    
                    int new_bid=Integer.parseInt(part2);
                    int high_bid=highest_bid_update;
                    //finding the highest bid from incomeing live bids
                    if (new_bid>high_bid){
                       //System.out.println("the new bid is bigger");
                        high_bid=new_bid;
                        highest_bid_update=new_bid;
                        //System.out.println("current bid value is"+highest_bid_update);
                   //----------------------------------------------------------------------------------------------------------------------
                    //sending message to all the connected client about the new highest bid
                           for(Socket c : socketList){
                           try {
                           c.getPort();
                           writer = new PrintWriter(c.getOutputStream());
                           writer.println("New highest Bid :"+highest_bid_update);
                           writer.flush();
                           } catch (IOException ex) {
                           Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
                           } 
                          }
                          History_display.append(message + "\n"+CurrentTime.getTime()+"\n"+"Its a new high bid!!!!\n\n");
                          //displaying the highest bid
                          Current_Highest_bid.setText(Integer.toString(highest_bid_update));
                          //takeing the winners details in the string for broadcast
                            winner="the winner of the bid is :"+part3+"with the bid of :"+highest_bid_update;
                    } else{
                    
                      // System.out.println("the new bid is smaller");
                    
                    } 
                   }
                        
                   }  
               }
                   
           }
           catch (IOException ex)
           {
           
               
           } 
	} 
       }
           
    }    
    
    }//GEN-LAST:event_Send_item_detailsActionPerformed
//-----------------------------------------------------------------------------------------------------------------------------------
    private void Stop_current_bidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Stop_current_bidActionPerformed
        // TODO add your handling code here:
        //------------------------------------------------------------------------------------------------------------------------------
        //letting everybody know that the current bid is finished and sending them the details of the winner
          for(Socket c : socketList){
              try {
                  c.getPort();
                  writer = new PrintWriter(c.getOutputStream());
                  writer.println("Current Bidding finished");
                   writer.println(winner);
                  writer.flush();
              } catch (IOException ex) {
                  Logger.getLogger(serverGUI.class.getName()).log(Level.SEVERE, null, ex);
              } 
          }
          
         // System.out.println(socketList.toString());
          Calendar CurrentTime = Calendar.getInstance();
          //displaying the winner details and bid ending information
          History_display.append("Current Bidding finished at  :\n"+ CurrentTime.getTime()+"\n");
          History_display.append(winner+"\n"+ CurrentTime.getTime());
          Item_description.setEditable(true);
          Send_item_details.setEnabled(true);     
    }//GEN-LAST:event_Stop_current_bidActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new serverGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Current_Highest_bid;
    private javax.swing.JTextField Current_time;
    private javax.swing.JTextArea History_display;
    private javax.swing.JTextArea Item_description;
    private javax.swing.JTextField Max_time_allowed;
    private javax.swing.JButton Send_item_details;
    private javax.swing.JButton Start_server;
    private javax.swing.JButton Stop_current_bid;
    private javax.swing.JButton Stop_server;
    private javax.swing.JTextField Time_remaining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables


}
